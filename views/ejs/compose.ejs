<!DOCTYPE html>
<html>
  <head>
    <title>Compose Page</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css"
    />
    <style>
      /* Add your custom CSS styles here */
      body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
      }
      .compose-page {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
      }
      .compose-page h2 {
        margin-top: 0;
      }
      .compose-page label {
        font-weight: bold;
      }
      .compose-page .editor-container {
        border: 1px solid #ccc;
        border-radius: 4px;
        margin-bottom: 20px;
      }
      .compose-page .editor-container .editor-toolbar {
        background-color: #f5f5f5;
        padding: 5px;
      }
      .compose-page .editor-container .editor-toolbar button {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 16px;
        margin-right: 8px;
        color: #333;
      }
      .compose-page .editor-container .editor-toolbar button.active {
        color: #fff;
        background-color: #007bff;
        border-radius: 4px;
        box-shadow: 0 0 8px rgba(0, 123, 255, 0.3);
      }
      .compose-page .editor-container .editor-toolbar button.active:focus {
        outline: none;
      }
      .compose-page .editor-container .editor-body {
        padding: 10px;
        min-height: 150px;
        border-top: 1px solid #ccc;
      }
      .compose-page .editor-container .editor-body p {
        margin: 0;
      }
      .compose-page .editor-container textarea {
        width: 100%;
        resize: vertical;
      }
      .compose-page .image-container img {
        max-width: 100%;
        max-height: 300px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
      }
      .compose-page .actions {
        text-align: right;
      }
      .compose-page .actions button {
        background-color: #007bff;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }
      .compose-page .actions button + button {
        margin-left: 10px;
      }
    </style>
  </head>
  <body>
    <div class="compose-page">
      <h2>Compose</h2>
      <form
        id="composeForm"
        action="/compose"
        method="post"
        enctype="multipart/form-data"
      >
        <div class="mb-3">
          <label for="title" class="form-label">Title:</label>
          <input
            type="text"
            class="form-control"
            id="title"
            name="title"
            required
          />
        </div>

        <div class="mb-3">
          <label for="subject" class="form-label">Subject:</label>
          <input
            type="text"
            class="form-control"
            id="subject"
            name="subject"
            required
          />
        </div>

        <div class="mb-3">
          <label for="content" class="form-label">Content:</label>
          <div class="editor-container">
            <div class="editor-toolbar">
              <button type="button" data-command="bold">
                <i class="fas fa-bold"></i>
              </button>
              <button type="button" data-command="italic">
                <i class="fas fa-italic"></i>
              </button>
              <button type="button" data-command="underline">
                <i class="fas fa-underline"></i>
              </button>
              <!-- Remove the two list buttons -->
              <button type="button" data-command="justifyLeft">
                <i class="fas fa-align-left"></i>
              </button>
              <button type="button" data-command="justifyCenter">
                <i class="fas fa-align-center"></i>
              </button>
              <button type="button" data-command="justifyRight">
                <i class="fas fa-align-right"></i>
              </button>
              <button type="button" data-command="insertHorizontalRule">
                <i class="fas fa-horizontal-rule"></i>
              </button>
              <button type="button" data-command="unlink">
                <i class="fas fa-unlink"></i>
              </button>
            </div>
            <!-- Updated textarea for content -->
            <textarea
              id="content"
              class="editor-body"
              name="content"
              onclick="focusEditor()"
              contenteditable
            ></textarea>
          </div>
        </div>

        <div class="mb-3">
          <label for="image" class="form-label">Image:</label>
          <input
            type="file"
            class="form-control"
            id="image"
            name="image"
            accept="image/*"
          />
        </div>
        <div class="image-container"></div>

        <div class="actions">
          <button type="submit" class="btn btn-success">Submit</button>
        </div>
      </form>
    </div>

    <script>
      // Function to format text in the textarea
      function formatText(command) {
        document.execCommand(command, false, null);
        focusEditor();
        updateContent(); // Update content in textarea
      }

      // Function to keep focus on the contenteditable element
      function focusEditor() {
        var editor = document.querySelector(".editor-body");
        editor.focus();
      }

      // Function to update content in textarea when buttons are clicked
      function updateContent() {
        var editor = document.querySelector(".editor-body");
        var content = editor.innerHTML;
        var textarea = document.querySelector(".editor-body");
        textarea.value = content;
      }

      // Function to display the selected image
      document.getElementById("image").addEventListener("change", function () {
        var file = this.files[0];
        var reader = new FileReader();

        reader.onload = function (e) {
          var img = document.createElement("img");
          img.src = e.target.result;
          img.classList.add("img-fluid"); // Bootstrap class for responsive images
          document.querySelector(".image-container").innerHTML = "";
          document.querySelector(".image-container").appendChild(img);
        };

        reader.readAsDataURL(file);
      });
      // Function to handle form submission
      function submitForm(event) {
        event.preventDefault();
        var form = document.getElementById("composeForm");
        var formData = new FormData(form);

        // Process form data and submit the blog post
        // You can send the data to a backend server here

        console.log({
          title: formData.get("title"),
          subject: formData.get("subject"),
          content: formData.get("content"),
          image: formData.get("image") || null,
        });
      }

      // Function to handle button click and toggle active state
      document
        .querySelectorAll(".editor-container .editor-toolbar button")
        .forEach(function (button) {
          button.addEventListener("click", function () {
            formatText(button.dataset.command);
            button.classList.toggle("active");
          });
        });
    </script>
  </body>
</html>
